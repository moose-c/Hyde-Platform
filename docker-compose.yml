version: '3'
services:

  map-website:
    build: ./frontend
    container_name: map-website

  nginx:
    image: nginx
    ports:
      - 80:80 # HTTP port
      - 443:443 # HTTPS port
    volumes:
      - ./frontend/certificates:/etc/nginx/certificates:ro
      - ./frontend/nginx.conf:/etc/nginx/nginx.conf:ro

    depends_on:
      - map-website
      - timeseries-api
      - raster-api
      - tomcat-ncwms
    # Service for ncWMS running on Tomcat
  tomcat-ncwms:
    container_name: tomcat-ncwms

    image: guygriffiths/ncwms

    volumes:
      - ./backend/ncWMS/config.xml:/usr/local/tomcat/.ncWMS2/config.xml # Configuration file for ncWMS
      - ./backend/ncWMS/tomcat-users.xml:/usr/local/tomcat/conf/tomcat-users.xml # User file for Tomcat
      - ${NETCDF_PATH}:/data/netCDF # Directory for netCDF data. CHANGE TO POINT TO CURRENT LOCATION

    ports:
      - 8080:8080 # Expose port 8080 for external access

    ulimits:
      nofile: 65536 # Set file descriptor limit

    restart: always # Restart upon failure 

    env_file:
      - ./.env # File containing postgress password

    healthcheck:
      # Healthcheck to ensure ncWMS is launched correctly
      test: curl --fail http://localhost:8080/ncWMS || exit 1
      interval: 20s
      retries: 5
      start_period: 10s
      timeout: 10s

  # Service for filling data into ncWMS
  ncwms-fill:
    container_name: ncwms-fill

    build: ./backend/ncWMS # Build from the specified Dockerfile

    env_file:
      - ./.env # File containing ncWMS password

    # Only start if tomcat-ncwms is running correctly
    depends_on:
      tomcat-ncwms:
        condition: service_healthy

    volumes:
      - ${NETCDF_PATH}:/data/netCDF # Copy data into the container. CHANGE TO POINT TO CURRENT LOCATION

  # Service for the raster API, serving png and asc files
  raster-api:
    container_name: raster-api

    build: ./backend/raster-api # Build image from the Dockerfile

    environment:
      DEBUG: 0

    volumes:
      - ${ASC_PATH}:/data/asc # Volume for ASC data. CHANGE TO POINT TO CURRENT LOCATION
      - ${PNG_PATH}:/data/png # Volume for PNG data. CHANGE TO POINT TO CURRENT LOCATION

    ports:
      - 8100:8100 # Expose port 8100 for external access

  # Service for the timeseries database
  timeseries-database:
    container_name: timeseries-database

    user: postgres # Specify the user as 'postgres'

    image: postgres:15-alpine # Use the specified PostgreSQL image

    env_file:
      - ./.env # File containing postgress password

    environment:
      DEBUG: 0
      POSTGRES_DB: timeseries
    
    ports:
      - 2019:2019

    healthcheck:
      # Check PostgreSQL availability
      test: [ "CMD-SHELL", "pg_isready" ]
      interval: 10s
      retries: 5

  # Service for filling data in the timeseries database
  timeseries-fill:
    container_name: timeseries-fill

    build: ./backend/timeseries-api/fill-db # Build from the specified Dockerfile

    env_file:
      - ./.env # File containing postgress password

    depends_on:
      timeseries-database:
        condition: service_healthy

    volumes:
      - ${TXT_PATH}:/data/txt # Copy data into the container. CHANGE TO POINT TO CURRENT LOCATION

  # Service for the timeseries API
  timeseries-api:
    container_name: timeseries-api

    build: ./backend/timeseries-api/api # Build image from the Dockerfile within 'api' folder

    env_file:
      - ./.env # File containing postgress password

    depends_on:
      timeseries-fill:
        condition: service_completed_successfully

    restart: always # Restart upon failure 

    ports:
      - 8000:8000 # Expose port 8000 for external access
